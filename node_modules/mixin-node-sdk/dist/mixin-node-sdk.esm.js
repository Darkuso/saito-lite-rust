import { randomBytes, createCipheriv, createHash } from 'crypto';
import { v4, parse } from 'uuid';
import axios from 'axios';
import { sign } from 'jsonwebtoken';
import forge, { md, util, pki } from 'node-forge';
import { Uint64LE } from 'int64-buffer';
import { SHA3 } from 'sha3';
import { BigNumber } from 'bignumber.js';
import WebSocket from 'ws';
import { ungzip, gzip } from 'pako';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var getSignPIN = function getSignPIN(keystore, pin, iterator) {
  var session_id = keystore.session_id,
      private_key = keystore.private_key,
      pin_token = keystore.pin_token,
      _pin = keystore.pin;
  pin = pin || _pin;
  if (!pin) throw new Error('PIN is required');
  var blockSize = 16;

  var _privateKey = toBuffer(private_key, 'base64');

  var pinKey = _privateKey.length === 64 ? signEncryptEd25519PIN(pin_token, _privateKey) : signPin(pin_token, private_key, session_id);
  var time = new Uint64LE(Date.now() / 1000 | 0).toBuffer();

  if (iterator == undefined || iterator === '') {
    iterator = Date.now() * 1000000;
  }

  iterator = new Uint64LE(iterator).toBuffer();
  pin = Buffer.from(pin, 'utf8');
  var buf = Buffer.concat([pin, Buffer.from(time), Buffer.from(iterator)]);
  var padding = blockSize - buf.length % blockSize;
  var paddingArray = [];

  for (var i = 0; i < padding; i++) {
    paddingArray.push(padding);
  }

  buf = Buffer.concat([buf, Buffer.from(paddingArray)]);
  var iv16 = randomBytes(16);
  var cipher = createCipheriv('aes-256-cbc', pinKey, iv16);
  cipher.setAutoPadding(false);
  var encrypted_pin_buff = cipher.update(buf, 'utf-8');
  encrypted_pin_buff = Buffer.concat([iv16, encrypted_pin_buff]);
  return Buffer.from(encrypted_pin_buff).toString('base64');
};
function toBuffer(content, encoding) {
  if (encoding === void 0) {
    encoding = 'utf8';
  }

  if (typeof content === 'object') {
    content = JSON.stringify(content);
  }

  return Buffer.from(content, encoding);
}
function getEd25519Sign(payload, privateKey) {
  var header = toBuffer({
    alg: 'EdDSA',
    typ: 'JWT'
  }).toString('base64');
  payload = base64url(toBuffer(payload));
  var result = [header, payload];
  var sign = base64url(Buffer.from(pki.ed25519.sign({
    message: result.join('.'),
    encoding: 'utf8',
    privateKey: privateKey
  })).toString('base64'));
  result.push(sign);
  return result.join('.');
}
var signRequest = function signRequest(method, url, body) {
  if (body === void 0) {
    body = '';
  }

  if (url.startsWith('https://api.mixin.one')) url = url.replace('https://api.mixin.one', '');
  if (url.startsWith('https://mixin-api.zeromesh.net')) url = url.replace('https://mixin-api.zeromesh.net', '');
  if (typeof body === 'object') body = JSON.stringify(body);
  method = method.toUpperCase();
  return md.sha256.create().update(method + url + body, 'utf8').digest().toHex();
};

function signEncryptEd25519PIN(pinToken, privateKey) {
  pinToken = Buffer.from(pinToken, 'base64');
  return scalarMult(privateKeyToCurve25519(privateKey), pinToken.slice(0, 32));
}

function signPin(pin_token, private_key, session_id) {
  pin_token = Buffer.from(pin_token, 'base64');
  private_key = pki.privateKeyFromPem(private_key);
  var pinKey = private_key.decrypt(pin_token, 'RSA-OAEP', {
    md: md.sha256.create(),
    label: session_id
  });
  return hexToBytes(util.binary.hex.encode(pinKey));
}

function hexToBytes(hex) {
  var bytes = new Uint8Array(32);

  for (var c = 0; c < hex.length; c += 2) {
    bytes[c / 2] = parseInt(hex.substr(c, 2), 16);
  }

  return bytes;
}

function scalarMult(curvePriv, publicKey) {
  curvePriv[0] &= 248;
  curvePriv[31] &= 127;
  curvePriv[31] |= 64;
  var sharedKey = new Uint8Array(32);
  crypto_scalarmult(sharedKey, curvePriv, publicKey);
  return sharedKey;
}

function base64url(buffer) {
  return buffer.toString('base64').replace(/\=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}

function privateKeyToCurve25519(privateKey) {
  var seed = privateKey.slice(0, 32);
  var sha512 = createHash('sha512');
  sha512.write(seed, 'binary');
  var digest = sha512.digest();
  digest[0] &= 248;
  digest[31] &= 127;
  digest[31] |= 64;
  return digest.slice(0, 32);
}

function crypto_scalarmult(q, n, p) {
  var z = new Uint8Array(32);
  var x = new Float64Array(80),
      r,
      i;
  var a = gf(),
      b = gf(),
      c = gf(),
      d = gf(),
      e = gf(),
      f = gf();

  for (i = 0; i < 31; i++) {
    z[i] = n[i];
  }

  z[31] = n[31] & 127 | 64;
  z[0] &= 248;
  unpack25519(x, p);

  for (i = 0; i < 16; i++) {
    b[i] = x[i];
    d[i] = a[i] = c[i] = 0;
  }

  a[0] = d[0] = 1;

  for (i = 254; i >= 0; --i) {
    r = z[i >>> 3] >>> (i & 7) & 1;
    sel25519(a, b, r);
    sel25519(c, d, r);
    A(e, a, c);
    Z(a, a, c);
    A(c, b, d);
    Z(b, b, d);
    S(d, e);
    S(f, a);
    M(a, c, a);
    M(c, b, e);
    A(e, a, c);
    Z(a, a, c);
    S(b, a);
    Z(c, d, f);
    M(a, c, gf([0xdb41, 1]));
    A(a, a, d);
    M(c, c, a);
    M(a, d, f);
    M(d, b, x);
    S(b, e);
    sel25519(a, b, r);
    sel25519(c, d, r);
  }

  for (i = 0; i < 16; i++) {
    x[i + 16] = a[i];
    x[i + 32] = c[i];
    x[i + 48] = b[i];
    x[i + 64] = d[i];
  }

  var x32 = x.subarray(32);
  var x16 = x.subarray(16);
  inv25519(x32, x32);
  M(x16, x16, x32);
  pack25519(q, x16);
  return 0;
}

function gf(init) {
  if (init === void 0) {
    init = undefined;
  }

  var i,
      r = new Float64Array(16);

  if (init) {
    for (i = 0; i < init.length; i++) {
      r[i] = init[i];
    }
  }

  return r;
}

function unpack25519(o, n) {
  var i;

  for (i = 0; i < 16; i++) {
    o[i] = n[2 * i] + (n[2 * i + 1] << 8);
  }

  o[15] &= 0x7fff;
}

function sel25519(p, q, b) {
  var t,
      c = ~(b - 1);

  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function A(o, a, b) {
  for (var i = 0; i < 16; i++) {
    o[i] = a[i] + b[i];
  }
}

function Z(o, a, b) {
  for (var i = 0; i < 16; i++) {
    o[i] = a[i] - b[i];
  }
}

function M(o, a, b) {
  var v,
      c,
      t0 = 0,
      t1 = 0,
      t2 = 0,
      t3 = 0,
      t4 = 0,
      t5 = 0,
      t6 = 0,
      t7 = 0,
      t8 = 0,
      t9 = 0,
      t10 = 0,
      t11 = 0,
      t12 = 0,
      t13 = 0,
      t14 = 0,
      t15 = 0,
      t16 = 0,
      t17 = 0,
      t18 = 0,
      t19 = 0,
      t20 = 0,
      t21 = 0,
      t22 = 0,
      t23 = 0,
      t24 = 0,
      t25 = 0,
      t26 = 0,
      t27 = 0,
      t28 = 0,
      t29 = 0,
      t30 = 0,
      b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11],
      b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;
  t0 += 38 * t16;
  t1 += 38 * t17;
  t2 += 38 * t18;
  t3 += 38 * t19;
  t4 += 38 * t20;
  t5 += 38 * t21;
  t6 += 38 * t22;
  t7 += 38 * t23;
  t8 += 38 * t24;
  t9 += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30; // t15 left as is
  // first car

  c = 1;
  v = t0 + c + 65535;
  c = Math.floor(v / 65536);
  t0 = v - c * 65536;
  v = t1 + c + 65535;
  c = Math.floor(v / 65536);
  t1 = v - c * 65536;
  v = t2 + c + 65535;
  c = Math.floor(v / 65536);
  t2 = v - c * 65536;
  v = t3 + c + 65535;
  c = Math.floor(v / 65536);
  t3 = v - c * 65536;
  v = t4 + c + 65535;
  c = Math.floor(v / 65536);
  t4 = v - c * 65536;
  v = t5 + c + 65535;
  c = Math.floor(v / 65536);
  t5 = v - c * 65536;
  v = t6 + c + 65535;
  c = Math.floor(v / 65536);
  t6 = v - c * 65536;
  v = t7 + c + 65535;
  c = Math.floor(v / 65536);
  t7 = v - c * 65536;
  v = t8 + c + 65535;
  c = Math.floor(v / 65536);
  t8 = v - c * 65536;
  v = t9 + c + 65535;
  c = Math.floor(v / 65536);
  t9 = v - c * 65536;
  v = t10 + c + 65535;
  c = Math.floor(v / 65536);
  t10 = v - c * 65536;
  v = t11 + c + 65535;
  c = Math.floor(v / 65536);
  t11 = v - c * 65536;
  v = t12 + c + 65535;
  c = Math.floor(v / 65536);
  t12 = v - c * 65536;
  v = t13 + c + 65535;
  c = Math.floor(v / 65536);
  t13 = v - c * 65536;
  v = t14 + c + 65535;
  c = Math.floor(v / 65536);
  t14 = v - c * 65536;
  v = t15 + c + 65535;
  c = Math.floor(v / 65536);
  t15 = v - c * 65536;
  t0 += c - 1 + 37 * (c - 1); // second car

  c = 1;
  v = t0 + c + 65535;
  c = Math.floor(v / 65536);
  t0 = v - c * 65536;
  v = t1 + c + 65535;
  c = Math.floor(v / 65536);
  t1 = v - c * 65536;
  v = t2 + c + 65535;
  c = Math.floor(v / 65536);
  t2 = v - c * 65536;
  v = t3 + c + 65535;
  c = Math.floor(v / 65536);
  t3 = v - c * 65536;
  v = t4 + c + 65535;
  c = Math.floor(v / 65536);
  t4 = v - c * 65536;
  v = t5 + c + 65535;
  c = Math.floor(v / 65536);
  t5 = v - c * 65536;
  v = t6 + c + 65535;
  c = Math.floor(v / 65536);
  t6 = v - c * 65536;
  v = t7 + c + 65535;
  c = Math.floor(v / 65536);
  t7 = v - c * 65536;
  v = t8 + c + 65535;
  c = Math.floor(v / 65536);
  t8 = v - c * 65536;
  v = t9 + c + 65535;
  c = Math.floor(v / 65536);
  t9 = v - c * 65536;
  v = t10 + c + 65535;
  c = Math.floor(v / 65536);
  t10 = v - c * 65536;
  v = t11 + c + 65535;
  c = Math.floor(v / 65536);
  t11 = v - c * 65536;
  v = t12 + c + 65535;
  c = Math.floor(v / 65536);
  t12 = v - c * 65536;
  v = t13 + c + 65535;
  c = Math.floor(v / 65536);
  t13 = v - c * 65536;
  v = t14 + c + 65535;
  c = Math.floor(v / 65536);
  t14 = v - c * 65536;
  v = t15 + c + 65535;
  c = Math.floor(v / 65536);
  t15 = v - c * 65536;
  t0 += c - 1 + 37 * (c - 1);
  o[0] = t0;
  o[1] = t1;
  o[2] = t2;
  o[3] = t3;
  o[4] = t4;
  o[5] = t5;
  o[6] = t6;
  o[7] = t7;
  o[8] = t8;
  o[9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}

function S(o, a) {
  M(o, a, a);
}

function inv25519(o, i) {
  var c = gf();
  var a;

  for (a = 0; a < 16; a++) {
    c[a] = i[a];
  }

  for (a = 253; a >= 0; a--) {
    S(c, c);

    if (a !== 2 && a !== 4) {
      M(c, c, i);
    }
  }

  for (a = 0; a < 16; a++) {
    o[a] = c[a];
  }
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(),
      t = gf();

  for (i = 0; i < 16; i++) {
    t[i] = n[i];
  }

  car25519(t);
  car25519(t);
  car25519(t);

  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed;

    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
      m[i - 1] &= 0xffff;
    }

    m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
    b = m[15] >> 16 & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1 - b);
  }

  for (i = 0; i < 16; i++) {
    o[2 * i] = t[i] & 0xff;
    o[2 * i + 1] = t[i] >> 8;
  }
}

function car25519(o) {
  var i,
      v,
      c = 1;

  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }

  o[0] += c - 1 + 37 * (c - 1);
}

var KeystoreAuth = /*#__PURE__*/function () {
  function KeystoreAuth(keystore) {
    this.keystore = keystore;
  }

  var _proto = KeystoreAuth.prototype;

  _proto.signToken = function signToken(signatrue, requestID) {
    var _this$keystore = this.keystore,
        client_id = _this$keystore.client_id,
        session_id = _this$keystore.session_id,
        private_key = _this$keystore.private_key,
        scope = _this$keystore.scope;
    var issuedAt = Math.floor(Date.now() / 1000);
    if (!requestID) requestID = v4();
    var payload = {
      uid: client_id,
      sid: session_id,
      iat: issuedAt,
      exp: issuedAt + 3600,
      jti: requestID,
      sig: signatrue,
      scp: scope || 'FULL'
    };

    var _privateKey = toBuffer(private_key, 'base64');

    return _privateKey.length === 64 ? getEd25519Sign(payload, _privateKey) : sign(payload, private_key, {
      algorithm: 'RS512'
    });
  };

  return KeystoreAuth;
}();

var delay = function delay(n) {
  if (n === void 0) {
    n = 500;
  }

  return new Promise(function (resolve) {
    setTimeout(function () {
      resolve();
    }, n);
  });
};
var hashMember = function hashMember(ids) {
  return newHash(ids.sort(function (a, b) {
    return a > b ? 1 : -1;
  }).join(''));
};
var newHash = function newHash(str) {
  return new SHA3(256).update(str).digest('hex');
};
var safeBase64 = function safeBase64(msg) {
  return msg.replaceAll('+', '-').replaceAll('/', '_').replace(/=+$/, '');
};

var hostURL = ['https://mixin-api.zeromesh.net', 'https://api.mixin.one'];
var request = function request(keystore, token) {
  if (token === void 0) {
    token = '';
  }

  var ins = axios.create({
    baseURL: hostURL[0],
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    timeout: 3000
  });
  var k;
  if (keystore) k = new KeystoreAuth(keystore);
  ins.interceptors.request.use(function (config) {
    var method = config.method,
        data = config.data;
    var uri = ins.getUri(config);
    var requestID = v4();
    config.headers['x-request-id'] = requestID;
    var jwtToken = '';
    if (token) jwtToken = token;else if (k) jwtToken = k.signToken(signRequest(method, uri, data), requestID);
    config.headers.Authorization = 'Bearer ' + jwtToken;
    return config;
  });
  ins.interceptors.response.use(function (res) {
    var _res$data = res.data,
        data = _res$data.data,
        error = _res$data.error;

    if (error) {
      error.request_id = res.headers['x-request-id'];
      return error;
    }

    return data;
  }, /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(e) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (['ETIMEDOUT', 'ECONNABORTED'].includes(e.code)) {
                ins.defaults.baseURL = e.config.baseURL = e.config.baseURL === hostURL[0] ? hostURL[1] : hostURL[0];
              }

              _context.next = 3;
              return delay();

            case 3:
              return _context.abrupt("return", ins(e.config));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  return ins;
};
var mixinRequest = /*#__PURE__*/request();

var UserClient = /*#__PURE__*/function () {
  function UserClient() {}

  var _proto = UserClient.prototype;

  _proto.userMe = function userMe() {
    return this.request.get("/me");
  };

  _proto.readUser = function readUser(userIdOrIdentityNumber) {
    return this.request.get("/users/" + userIdOrIdentityNumber);
  };

  _proto.readBlockUsers = function readBlockUsers() {
    return this.request.get("/blocking_users");
  };

  _proto.readUsers = function readUsers(userIDs) {
    return this.request.post("/users/fetch", userIDs);
  };

  _proto.readFriends = function readFriends() {
    return this.request.get("/friends");
  };

  _proto.searchUser = function searchUser(identityNumberOrPhone) {
    return this.request.get("/search/" + identityNumberOrPhone);
  };

  _proto.createUser = /*#__PURE__*/function () {
    var _createUser = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(full_name, session_secret) {
      var _forge$pki$ed25519$ge, publicKey, privateKey, params, u;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!session_secret) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", this.request.post("/users", {
                full_name: full_name,
                session_secret: session_secret
              }));

            case 2:
              _forge$pki$ed25519$ge = forge.pki.ed25519.generateKeyPair(), publicKey = _forge$pki$ed25519$ge.publicKey, privateKey = _forge$pki$ed25519$ge.privateKey;
              params = {
                full_name: full_name,
                session_secret: Buffer.from(publicKey).toString('base64')
              };
              _context.next = 6;
              return this.request.post("/users", params);

            case 6:
              u = _context.sent;
              u.publick_key = publicKey.toString('base64');
              u.private_key = privateKey.toString('base64');
              return _context.abrupt("return", u);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function createUser(_x, _x2) {
      return _createUser.apply(this, arguments);
    }

    return createUser;
  }();

  _proto.modifyProfile = function modifyProfile(full_name, avatar_base64) {
    return this.request.post("/me", {
      full_name: full_name,
      avatar_base64: avatar_base64
    });
  };

  _proto.modifyRelationships = function modifyRelationships(relationship) {
    return this.request.post("/relationships", relationship);
  };

  return UserClient;
}();
var userMe = function userMe(token) {
  return request(undefined, token).get('/me');
};
var readFriends = function readFriends(token) {
  return request(undefined, token).get("/friends");
};
var readBlockUsers = function readBlockUsers(token) {
  return request(undefined, token).get("/blocking_users");
};

var AddressClient = /*#__PURE__*/function () {
  function AddressClient() {}

  var _proto = AddressClient.prototype;

  _proto.createAddress = function createAddress(params, pin) {
    params.pin = getSignPIN(this.keystore, pin);
    return this.request.post('/addresses', params);
  };

  _proto.readAddress = function readAddress(addressID) {
    return this.request.get("/addresses/" + addressID);
  };

  _proto.readAddresses = function readAddresses(assetID) {
    return this.request.get("/assets/" + assetID + "/addresses");
  };

  _proto.deleteAddress = function deleteAddress(addressID, pin) {
    pin = getSignPIN(this.keystore, pin);
    return this.request.post("/addresses/" + addressID + "/delete", {
      pin: pin
    });
  };

  return AddressClient;
}();

var AppClient = /*#__PURE__*/function () {
  function AppClient() {}

  var _proto = AppClient.prototype;

  _proto.updateApp = function updateApp(appID, params) {
    return this.request.post("/apps/" + appID, params);
  };

  _proto.readFavoriteApps = function readFavoriteApps(userID) {
    return this.request.get("/users/" + userID + "/apps/favorite");
  };

  _proto.favoriteApp = function favoriteApp(appID) {
    return this.request.post("/apps/" + appID + "/favorite");
  };

  _proto.unfavoriteApp = function unfavoriteApp(appID) {
    return this.request.post("/apps/" + appID + "/unfavorite");
  };

  return AppClient;
}();

var AssetClient = /*#__PURE__*/function () {
  function AssetClient() {}

  var _proto = AssetClient.prototype;

  _proto.readAsset = function readAsset(assetID) {
    return this.request.get("/assets/" + assetID);
  };

  _proto.readAssets = function readAssets() {
    return this.request.get('/assets');
  };

  _proto.readAssetFee = function readAssetFee(assetID) {
    return this.request.get("/assets/" + assetID + "/fee");
  };

  _proto.readExchangeRates = function readExchangeRates() {
    return this.request.get('/fiats');
  };

  _proto.readAssetNetworkTicker = function readAssetNetworkTicker(asset_id, offset) {
    return this.request.get("/network/ticker", {
      params: {
        offset: offset,
        asset_id: asset_id
      }
    });
  };

  return AssetClient;
}();
var readAssets = function readAssets(token) {
  return request(undefined, token).get('/assets');
};
var readAsset = function readAsset(token, assetID) {
  return request(undefined, token).get("/assets/" + assetID);
};

var AttachmentClient = /*#__PURE__*/function () {
  function AttachmentClient() {}

  var _proto = AttachmentClient.prototype;

  _proto.createAttachment = function createAttachment() {
    return this.request.post("/attachments");
  };

  _proto.showAttachment = function showAttachment(attachment_id) {
    return this.request.get("/attachments/" + attachment_id);
  };

  _proto.uploadFile = /*#__PURE__*/function () {
    var _uploadFile = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(file) {
      var _yield$this$createAtt, view_url, upload_url, attachment_id;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.createAttachment();

            case 2:
              _yield$this$createAtt = _context.sent;
              view_url = _yield$this$createAtt.view_url;
              upload_url = _yield$this$createAtt.upload_url;
              attachment_id = _yield$this$createAtt.attachment_id;
              _context.next = 8;
              return uploadAttachmentTo(upload_url, file);

            case 8:
              return _context.abrupt("return", {
                view_url: view_url,
                attachment_id: attachment_id
              });

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function uploadFile(_x) {
      return _uploadFile.apply(this, arguments);
    }

    return uploadFile;
  }();

  return AttachmentClient;
}();
function uploadAttachmentTo(_x2, _x3) {
  return _uploadAttachmentTo.apply(this, arguments);
}

function _uploadAttachmentTo() {
  _uploadAttachmentTo = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(uploadURL, file) {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", axios.create()({
              url: uploadURL,
              method: "PUT",
              data: file,
              headers: {
                'x-amz-acl': 'public-read',
                'Content-Type': 'application/octet-stream'
              },
              maxContentLength: 2147483648
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _uploadAttachmentTo.apply(this, arguments);
}

var ConversationClient = /*#__PURE__*/function () {
  function ConversationClient() {}

  var _proto = ConversationClient.prototype;

  _proto.createConversation = function createConversation(params) {
    return this.request.post('/conversations', params);
  };

  _proto.updateConversation = function updateConversation(conversationID, params) {
    return this.request.put("/conversations/" + conversationID, params);
  };

  _proto.createContactConversation = function createContactConversation(userID) {
    return this.createConversation({
      category: 'CONTACT',
      conversation_id: this.uniqueConversationID(this.keystore.client_id, userID),
      participants: [{
        user_id: userID
      }]
    });
  };

  _proto.createGroupConversation = function createGroupConversation(conversationID, name, participant) {
    return this.createConversation({
      category: 'GROUP',
      conversation_id: conversationID,
      name: name,
      participants: participant
    });
  };

  _proto.readConversation = function readConversation(conversationID) {
    return this.request.get("/conversations/" + conversationID);
  };

  _proto.managerConversation = function managerConversation(conversationID, action, participant) {
    return this.request.post("/conversations/" + conversationID + "/participants/" + action, participant);
  };

  _proto.addParticipants = function addParticipants(conversationID, userIDs) {
    var participants = userIDs.map(function (userID) {
      return {
        user_id: userID
      };
    });
    return this.managerConversation(conversationID, 'ADD', participants);
  };

  _proto.removeParticipants = function removeParticipants(conversationID, userIDs) {
    var participants = userIDs.map(function (userID) {
      return {
        user_id: userID
      };
    });
    return this.managerConversation(conversationID, 'REMOVE', participants);
  };

  _proto.adminParticipants = function adminParticipants(conversationID, userIDs) {
    var participants = userIDs.map(function (userID) {
      return {
        user_id: userID,
        role: 'ADMIN'
      };
    });
    return this.managerConversation(conversationID, 'ROLE', participants);
  };

  _proto.rotateConversation = function rotateConversation(conversationID) {
    return this.request.post("/conversations/" + conversationID + "/rotate");
  };

  return ConversationClient;
}();
var readConversation = function readConversation(token, conversation_id) {
  return request(undefined, token).get("conversations/" + conversation_id);
};

var MessageClient = /*#__PURE__*/function () {
  function MessageClient() {}

  var _proto = MessageClient.prototype;

  _proto.sendAcknowledgements = function sendAcknowledgements(messages) {
    return this.request.post('/acknowledgements', messages);
  };

  _proto.sendAcknowledgement = function sendAcknowledgement(message) {
    return this.sendAcknowledgements([message]);
  };

  _proto.sendMessage = function sendMessage(message) {
    return this.request.post('/messages', message);
  };

  _proto.sendMessages = function sendMessages(messages) {
    return this.request.post('/messages', messages);
  };

  _proto.sendMsg = function sendMsg(recipient_id, category, data) {
    if (typeof data === 'object') data = JSON.stringify(data);
    return this.sendMessage({
      category: category,
      recipient_id: recipient_id,
      conversation_id: this.uniqueConversationID(this.keystore.client_id, recipient_id),
      message_id: this.newUUID(),
      data: Buffer.from(data).toString('base64')
    });
  };

  _proto.sendMessageText = function sendMessageText(userID, text) {
    return this.sendMsg(userID, "PLAIN_TEXT", text);
  };

  _proto.sendMessagePost = function sendMessagePost(userID, text) {
    return this.sendMsg(userID, "PLAIN_POST", text);
  };

  _proto.sendTextMsg = function sendTextMsg(userID, text) {
    return this.sendMsg(userID, "PLAIN_TEXT", text);
  };

  _proto.sendPostMsg = function sendPostMsg(userID, text) {
    return this.sendMsg(userID, "PLAIN_POST", text);
  };

  _proto.sendImageMsg = function sendImageMsg(userID, image) {
    return this.sendMsg(userID, "PLAIN_IMAGE", image);
  };

  _proto.sendDataMsg = function sendDataMsg(userID, data) {
    return this.sendMsg(userID, "PLAIN_DATA", data);
  };

  _proto.sendStickerMsg = function sendStickerMsg(userID, sticker) {
    return this.sendMsg(userID, "PLAIN_STICKER", sticker);
  };

  _proto.sendContactMsg = function sendContactMsg(userID, contact) {
    return this.sendMsg(userID, "PLAIN_CONTACT", contact);
  };

  _proto.sendAppCardMsg = function sendAppCardMsg(userID, appCard) {
    return this.sendMsg(userID, "APP_CARD", appCard);
  };

  _proto.sendAudioMsg = function sendAudioMsg(userID, audio) {
    return this.sendMsg(userID, "PLAIN_AUDIO", audio);
  };

  _proto.sendLiveMsg = function sendLiveMsg(userID, live) {
    return this.sendMsg(userID, "PLAIN_LIVE", live);
  };

  _proto.sendVideoMsg = function sendVideoMsg(userID, video) {
    return this.sendMsg(userID, "PLAIN_VIDEO", video);
  };

  _proto.sendLocationMsg = function sendLocationMsg(userID, location) {
    return this.sendMsg(userID, "PLAIN_LOCATION", location);
  };

  _proto.sendAppButtonMsg = function sendAppButtonMsg(userID, appButton) {
    return this.sendMsg(userID, "APP_BUTTON_GROUP", appButton);
  };

  _proto.sendRecallMsg = function sendRecallMsg(userID, message) {
    return this.sendMsg(userID, "MESSAGE_RECALL", message);
  };

  return MessageClient;
}();

var aggregatedSignaturePrefix = 0xFF01;
var empty = /*#__PURE__*/Buffer.from([0x00, 0x00]);
var magic = /*#__PURE__*/Buffer.from([0x77, 0x77]);
var maxEcodingInt = 0xFFFF;
var TxVersion = 0x02;
var OperatorSum = 0xfe;
var OperatorCmp = 0xff;
var Encoder = /*#__PURE__*/function () {
  function Encoder(buf) {
    this.buf = buf;
  }

  var _proto = Encoder.prototype;

  _proto.write = function write(buf) {
    this.buf = Buffer.concat([this.buf, buf]);
  };

  _proto.writeInt = function writeInt(i) {
    if (i > maxEcodingInt) {
      throw new Error('int overflow');
    }

    var buf = Buffer.alloc(2);
    buf.writeUInt16BE(i);
    this.write(buf);
  };

  _proto.wirteUint64 = function wirteUint64(i) {
    var buf = Buffer.alloc(8);
    buf.writeBigUInt64BE(i);
    this.write(buf);
  };

  _proto.wirteUint16 = function wirteUint16(i) {
    var buf = Buffer.alloc(2);
    buf.writeUInt16BE(i);
    this.write(buf);
  };

  _proto.writeInteger = function writeInteger(i) {
    var b = getIntBytes(i);
    this.writeInt(b.length);
    this.write(Buffer.from(b));
  };

  _proto.writeSlice = function writeSlice(str) {
    var l = str.length;
    if (l > 128) throw new Error('slice too long');
    this.write(Buffer.from([l]));
    this.write(str);
  };

  _proto.encodeInput = function encodeInput(i) {
    this.write(Buffer.from(i.hash, 'hex'));
    this.writeInt(i.index);
    if (!i.genesis) i.genesis = "";
    this.writeInt(i.genesis.length);
    this.write(Buffer.from(i.genesis));
    var d = i.deposit;

    if (typeof d === 'undefined') {
      this.write(empty);
    } else {
      // TODO... to test...
      this.write(magic);
      this.write(Buffer.from(d.chain, 'hex'));
      var asset = Buffer.from(d.asset);
      this.writeInt(asset.byteLength);
      this.write(asset);
      var tx = Buffer.from(d.transaction);
      this.writeInt(tx.byteLength);
      this.write(tx);
      this.wirteUint64(d.index);
      this.writeInteger(d.amount);
    }

    var m = i.mint;

    if (typeof m === 'undefined') {
      this.write(empty);
    } else {
      this.write(magic);
      if (!m.group) m.group = "";
      this.writeInt(m.group.length);
      this.write(Buffer.from(m.group));
      this.wirteUint64(m.batch);
      this.writeInteger(m.amount);
    }
  };

  _proto.encodeOutput = function encodeOutput(o) {
    var _this = this;

    if (!o.type) o.type = 0;
    this.write(Buffer.from([0x00, o.type]));
    this.writeInteger(new BigNumber(1e8).times(o.amount).toNumber());
    this.writeInt(o.keys.length);
    o.keys.forEach(function (k) {
      return _this.write(Buffer.from(k, 'hex'));
    });
    this.write(Buffer.from(o.mask, 'hex'));
    var s = Buffer.from(o.script, 'hex');
    this.writeInt(s.byteLength);
    this.write(s);
    var w = o.withdrawal;

    if (typeof w === 'undefined') {
      this.write(empty);
    } else {
      // TODO... not check...
      this.write(magic);
      this.write(Buffer.from(w.chain, 'hex'));
      var asset = Buffer.from(w.asset);
      this.writeInt(asset.byteLength);
      this.write(asset);
      if (!w.address) w.address = "";
      var addr = Buffer.from(w.address);
      this.writeInt(addr.byteLength);
      this.write(addr);
      var tag = Buffer.from(w.tag);
      this.writeInt(tag.byteLength);
      this.write(tag);
    }
  };

  _proto.encodeAggregatedSignature = function encodeAggregatedSignature(js) {
    var _this2 = this;

    this.writeInt(maxEcodingInt);
    this.writeInt(aggregatedSignaturePrefix);
    this.write(Buffer.from(js.signature, 'hex'));

    if (js.signers.length === 0) {
      this.write(Buffer.from([0x00]));
      this.writeInt(0);
      return;
    }

    js.signers.forEach(function (m, i) {
      if (i > 0 && m <= js.signers[i - 1]) {
        throw new Error('signers not sorted');
      }

      if (m > maxEcodingInt) {
        throw new Error('signer overflow');
      }
    });
    var max = js.signers[js.signers.length - 1];

    if (((max / 8 | 0) + 1 | 0) > js.signature.length * 2) {
      // TODO... not check...
      this.write(Buffer.from([0x01]));
      this.writeInt(js.signature.length);
      js.signers.forEach(function (m) {
        return _this2.writeInt(m);
      });
      return;
    }

    var masks = Buffer.alloc((max / 8 | 0) + 1 | 0);
    js.signers.forEach(function (m) {
      return masks[m / 8 | 0] ^= 1 << (m % 8 | 0);
    });
    this.write(Buffer.from([0x00]));
    this.writeInt(masks.length);
    this.write(masks);
  };

  _proto.encodeSignature = function encodeSignature(sm) {
    var _this3 = this;

    var ss = Object.keys(sm).map(function (j, i) {
      return {
        index: j,
        sig: sm[i]
      };
    }).sort(function (a, b) {
      return Number(a.index) - Number(b.index);
    });
    this.writeInt(ss.length);
    ss.forEach(function (s) {
      _this3.wirteUint16(Number(s.index));

      _this3.write(Buffer.from(s.sig, 'hex'));
    });
  };

  return Encoder;
}();

function getIntBytes(x) {
  var bytes = [];

  do {
    if (x === 0) break;
    bytes.unshift(x & 255);
    x = x / Math.pow(2, 8) | 0;
  } while (1);

  return bytes;
}

function dumpTransaction(signed) {
  var enc = new Encoder(magic);
  enc.write(Buffer.from([0x00, signed.version]));
  enc.write(Buffer.from(signed.asset, 'hex'));
  var il = signed.inputs.length;
  enc.writeInt(il);
  signed.inputs.forEach(function (i) {
    return enc.encodeInput(i);
  });
  var ol = signed.outputs.length;
  enc.writeInt(ol);
  signed.outputs.forEach(function (o) {
    return enc.encodeOutput(o);
  });
  var e = Buffer.from(signed.extra, 'base64');
  enc.writeInt(e.byteLength);
  enc.write(e);

  if (signed.aggregated) {
    enc.encodeAggregatedSignature(signed.aggregated);
  } else {
    var sl = signed.signatures ? Object.keys(signed.signatures).length : 0;
    if (sl == maxEcodingInt) throw new Error('signatures overflow');
    enc.writeInt(sl);

    if (sl > 0) {
      enc.encodeSignature(signed.signatures);
    }
  }

  return enc.buf.toString('hex');
}
function DumpOutputFromGhostKey(gi, amount, threshold) {
  var mask = gi.mask,
      keys = gi.keys;
  return {
    mask: mask,
    keys: keys,
    amount: Number(amount).toFixed(8),
    script: Buffer.from([OperatorCmp, OperatorSum, threshold]).toString('hex')
  };
}

var MultisigsClient = /*#__PURE__*/function () {
  function MultisigsClient() {}

  var _proto = MultisigsClient.prototype;

  _proto.readMultisigs = function readMultisigs(offset, limit) {
    return this.request.get("/multisigs", {
      params: {
        offset: offset,
        limit: limit
      }
    });
  };

  _proto.readMultisigOutputs = function readMultisigOutputs(members, threshold, offset, limit) {
    if (members.length > 0 && threshold < 1 || threshold > members.length) return Promise.reject(new Error("Invalid threshold or members"));
    var params = {
      threshold: Number(threshold),
      offset: offset,
      limit: limit
    };
    params.members = hashMember(members);
    return this.request.get("/multisigs/outputs", {
      params: params
    });
  };

  _proto.createMultisig = function createMultisig(action, raw) {
    return this.request.post("/multisigs/requests", {
      action: action,
      raw: raw
    });
  };

  _proto.signMultisig = function signMultisig(request_id, pin) {
    pin = getSignPIN(this.keystore, pin);
    return this.request.post("/multisigs/requests/" + request_id + "/sign", {
      pin: pin
    });
  };

  _proto.cancelMultisig = function cancelMultisig(request_id) {
    return this.request.post("/multisigs/requests/" + request_id + "/cancel");
  };

  _proto.unlockMultisig = function unlockMultisig(request_id, pin) {
    pin = getSignPIN(this.keystore, pin);
    return this.request.post("/multisigs/requests/" + request_id + "/unlock", {
      pin: pin
    });
  };

  _proto.readGhostKeys = function readGhostKeys(receivers, index) {
    return this.request.post("/outputs", {
      receivers: receivers,
      index: index,
      hint: ""
    });
  };

  _proto.batchReadGhostKeys = function batchReadGhostKeys(inputs) {
    return this.request.post("/outputs", inputs);
  };

  _proto.makeMultisignTransaction = /*#__PURE__*/function () {
    var _makeMultisignTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(txInput) {
      var inputs, memo, outputs, tx, _iterator, _step, input, change, _iterator2, _step2, output, ghostInputs, ghosts;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // validate ...
              inputs = txInput.inputs, memo = txInput.memo, outputs = txInput.outputs;
              tx = {
                version: TxVersion,
                asset: newHash(inputs[0].asset_id),
                extra: Buffer.from(memo).toString('base64'),
                inputs: [],
                outputs: []
              }; // add input

              for (_iterator = _createForOfIteratorHelperLoose(inputs); !(_step = _iterator()).done;) {
                input = _step.value;
                tx.inputs.push({
                  hash: input.transaction_hash,
                  index: input.output_index
                });
              }

              change = inputs.reduce(function (sum, input) {
                return sum.plus(input.amount);
              }, new BigNumber(0));

              for (_iterator2 = _createForOfIteratorHelperLoose(outputs); !(_step2 = _iterator2()).done;) {
                output = _step2.value;
                change = change.minus(output.amount);
              }

              if (change.isGreaterThan(0)) outputs.push({
                receivers: inputs[0].members,
                threshold: inputs[0].threshold,
                amount: change.toString()
              });
              ghostInputs = [];
              outputs.forEach(function (output, idx) {
                return ghostInputs.push({
                  receivers: output.receivers,
                  index: idx,
                  hint: txInput.hint
                });
              }); // get ghost keys

              _context.next = 10;
              return this.batchReadGhostKeys(ghostInputs);

            case 10:
              ghosts = _context.sent;
              outputs.forEach(function (output, idx) {
                return tx.outputs.push(DumpOutputFromGhostKey(ghosts[idx], output.amount, output.threshold));
              });
              return _context.abrupt("return", dumpTransaction(tx));

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function makeMultisignTransaction(_x) {
      return _makeMultisignTransaction.apply(this, arguments);
    }

    return makeMultisignTransaction;
  }();

  return MultisigsClient;
}();

var PINClient = /*#__PURE__*/function () {
  function PINClient() {}

  var _proto = PINClient.prototype;

  _proto.verifyPin = function verifyPin(pin) {
    pin = getSignPIN(this.keystore, pin);
    return this.request.post("/pin/verify", {
      pin: pin
    });
  };

  _proto.modifyPin = function modifyPin(pin, old_pin) {
    pin = getSignPIN(this.keystore, pin);
    if (old_pin) old_pin = getSignPIN(this.keystore, old_pin);
    return this.request.post("/pin/update", {
      old_pin: old_pin,
      pin: pin
    });
  };

  _proto.readTurnServers = function readTurnServers() {
    return this.request.get("/turn");
  };

  return PINClient;
}();

var SnapshotClient = /*#__PURE__*/function () {
  function SnapshotClient() {}

  var _proto = SnapshotClient.prototype;

  _proto.readSnapshots = function readSnapshots(params) {
    return this.request.get("/snapshots", {
      params: params
    });
  };

  _proto.readNetworkSnapshots = function readNetworkSnapshots(params) {
    return this.request.get("/network/snapshots", {
      params: params
    });
  };

  _proto.readSnapshot = function readSnapshot(snapshot_id) {
    return this.request.get("/snapshots/" + snapshot_id);
  };

  _proto.readNetworkSnapshot = function readNetworkSnapshot(snapshot_id) {
    return this.request.get("/network/snapshots/" + snapshot_id);
  };

  return SnapshotClient;
}();
var readSnapshots = function readSnapshots(token, params) {
  return request(undefined, token).get("/snapshots", {
    params: params
  });
};
var readSnapshot = function readSnapshot(token, snapshot_id) {
  return request(undefined, token).get("/snapshots/" + snapshot_id);
};

var TransferClient = /*#__PURE__*/function () {
  function TransferClient() {}

  var _proto = TransferClient.prototype;

  _proto.verifyPayment = function verifyPayment(params) {
    return this.request.post("/payments", params);
  };

  _proto.transfer = function transfer(params, pin) {
    params.pin = getSignPIN(this.keystore, pin);
    return this.request.post("/transfers", params);
  };

  _proto.readTransfer = function readTransfer(trace_id) {
    return this.request.get("/transfers/trace/" + trace_id);
  };

  _proto.transaction = function transaction(params, pin) {
    params.pin = getSignPIN(this.keystore, pin);
    return this.request.post("/transactions", params);
  };

  _proto.withdraw = function withdraw(params, pin) {
    params.pin = getSignPIN(this.keystore, pin);
    return this.request.post("/withdrawals", params);
  };

  return TransferClient;
}();

var Prefix = "NFO";
var Version = 0x00;
var DefaultChain = "43d61dcd-e413-450d-80b8-101d5e903357";
var DefaultClass = "3c8c161a18ae2c8b14fda1216fff7da88c419b5d";
function buildMintCollectibleMemo(collection_id, token_id, content) {
  var encoder = new Encoder(Buffer.from(Prefix, 'utf8'));
  encoder.write(Buffer.from([Version]));
  encoder.write(Buffer.from([1]));
  encoder.wirteUint64(BigInt(1));
  encoder.write(parse(DefaultChain));
  encoder.writeSlice(Buffer.from(DefaultClass, 'hex'));
  encoder.writeSlice(Buffer.from(parse(collection_id)));
  encoder.writeSlice(Buffer.from(parse(token_id)));
  encoder.writeSlice(Buffer.from(newHash(content), 'hex'));
  return safeBase64(encoder.buf.toString('base64'));
}

var MintAssetID = "c94ac88f-4671-3976-b60a-09064f1811e8";
var MintMinimumCost = "0.001";
var GroupMembers = ["4b188942-9fb0-4b99-b4be-e741a06d1ebf", "dd655520-c919-4349-822f-af92fabdbdf4", "047061e6-496d-4c35-b06b-b0424a8a400d", "acf65344-c778-41ee-bacb-eb546bacfb9f", "a51006d0-146b-4b32-a2ce-7defbf0d7735", "cf4abd9c-2cfa-4b5a-b1bd-e2b61a83fabd", "50115496-7247-4e2c-857b-ec8680756bee"];
var GroupThreshold = 5;
var CollectiblesClient = /*#__PURE__*/function () {
  function CollectiblesClient() {}

  var _proto = CollectiblesClient.prototype;

  _proto.newMintCollectibleTransferInput = function newMintCollectibleTransferInput(p) {
    var trace_id = p.trace_id,
        collection_id = p.collection_id,
        token_id = p.token_id,
        content = p.content;
    if (!trace_id || !collection_id || !token_id || !content) throw new Error("Missing parameters");
    var input = {
      asset_id: MintAssetID,
      amount: MintMinimumCost,
      trace_id: trace_id,
      memo: buildMintCollectibleMemo(collection_id, token_id, content),
      opponent_multisig: {
        receivers: GroupMembers,
        threshold: GroupThreshold
      }
    };
    return input;
  };

  _proto.readCollectibleToken = function readCollectibleToken(id) {
    return this.request.get("/collectibles/tokens/" + id);
  };

  _proto.readCollectibleOutputs = function readCollectibleOutputs(_members, threshold, offset, limit) {
    var members = hashMember(_members);
    return this.request.get("/collectibles/outputs", {
      params: {
        members: members,
        threshold: threshold,
        offset: offset,
        limit: limit
      }
    });
  };

  _proto.makeCollectibleTransactionRaw = /*#__PURE__*/function () {
    var _makeCollectibleTransactionRaw = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(txInput) {
      var token, output, receivers, threshold, tx, ghostInputs;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              token = txInput.token, output = txInput.output, receivers = txInput.receivers, threshold = txInput.threshold;
              tx = {
                version: TxVersion,
                asset: token.mixin_id,
                extra: token.nfo,
                inputs: [{
                  hash: output.transaction_hash,
                  index: output.output_index
                }]
              };
              _context.next = 4;
              return this.batchReadGhostKeys([{
                receivers: receivers,
                index: 0,
                hint: output.output_id
              }]);

            case 4:
              ghostInputs = _context.sent;
              tx.outputs = [DumpOutputFromGhostKey(ghostInputs[0], output.amount, threshold)];
              return _context.abrupt("return", dumpTransaction(tx));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function makeCollectibleTransactionRaw(_x) {
      return _makeCollectibleTransactionRaw.apply(this, arguments);
    }

    return makeCollectibleTransactionRaw;
  }();

  _proto.createCollectibleRequest = function createCollectibleRequest(action, raw) {
    return this.request.post("/collectibles/requests", {
      action: action,
      raw: raw
    });
  };

  _proto.signCollectibleRequest = function signCollectibleRequest(requestId, pin) {
    pin = getSignPIN(this.keystore, pin);
    return this.request.post("/collectibles/requests/" + requestId + "/sign", {
      pin: pin
    });
  };

  _proto.cancelCollectibleRequest = function cancelCollectibleRequest(requestId) {
    return this.request.post("/collectibles/requests/" + requestId + "/cancel");
  };

  _proto.unlockCollectibleRequest = function unlockCollectibleRequest(requestId, pin) {
    pin = getSignPIN(this.keystore, pin);
    return this.request.post("/collectibles/requests/" + requestId + "/unlock", {
      pin: pin
    });
  };

  return CollectiblesClient;
}();

var Client = /*#__PURE__*/function () {
  function Client(keystore, token) {
    if (!keystore && !token) throw new Error('keystore or token required');
    this.keystore = keystore;
    this.request = request(keystore, token);
  } // Oauth...


  var _proto = Client.prototype;

  _proto.authorizeToken = function authorizeToken(code, client_secret, code_verifier) {
    if (!client_secret) client_secret = this.keystore.client_secret;
    if (!client_secret) return Promise.reject(new Error('client_secret required'));
    return this.request.post('/oauth/token', {
      client_secret: client_secret,
      code: code,
      code_verifier: code_verifier,
      client_id: this.keystore.client_id
    });
  };

  _proto.newUUID = function newUUID() {
    return v4();
  };

  _proto.uniqueConversationID = function uniqueConversationID(userID, recipientID) {
    var minId = userID,
        maxId = recipientID;

    if (minId > maxId) {
      minId = recipientID;
      maxId = userID;
    }

    var hash = createHash('md5');
    hash.update(minId);
    hash.update(maxId);
    var bytes = hash.digest();
    bytes[6] = bytes[6] & 0x0f | 0x30;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    var digest = Array.from(bytes, function (_byte) {
      return ("0" + (_byte & 0xff).toString(16)).slice(-2);
    }).join('');
    return digest.slice(0, 8) + "-" + digest.slice(8, 12) + "-" + digest.slice(12, 16) + "-" + digest.slice(16, 20) + "-" + digest.slice(20, 32);
  };

  return Client;
}();
[AddressClient, AppClient, AssetClient, AttachmentClient, ConversationClient, MessageClient, MultisigsClient, PINClient, SnapshotClient, TransferClient, UserClient, CollectiblesClient].forEach(function (client) {
  return _extends(Client, client);
});

function _extends(origin, target) {
  for (var key in target.prototype) {
    origin.prototype[key] = target.prototype[key];
  }
}

var zeromeshUrl = 'wss://mixin-blaze.zeromesh.net';
var oneUrl = 'wss://blaze.mixin.one/';
var BlazeClient = /*#__PURE__*/function (_Client) {
  _inheritsLoose(BlazeClient, _Client);

  function BlazeClient(keystore, option) {
    var _this;

    _this = _Client.call(this, keystore) || this;
    _this.url = oneUrl;
    _this.isAlive = false;
    _this.options = {
      parse: false,
      syncAck: false
    };
    _this.ws = null;
    if (option) _this.options = option;
    return _this;
  }

  var _proto = BlazeClient.prototype;

  _proto.loopBlaze = function loopBlaze(h) {
    if (!h.onMessage) throw new Error('OnMessage not set');
    this.h = h;

    this._loopBlaze();
  };

  _proto._loopBlaze = function _loopBlaze() {
    var _this2 = this;

    var k = new KeystoreAuth(this.keystore);
    var headers = {
      Authorization: 'Bearer ' + k.signToken(signRequest('GET', '/'), '')
    };
    this.ws = new WebSocket(this.url, "Mixin-Blaze-1", {
      headers: headers,
      handshakeTimeout: 3000
    });

    this.ws.onmessage = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(event) {
        var msg;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this2.decode(event.data);

              case 2:
                msg = _context.sent;

                if (msg) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return");

              case 5:
                if (!(msg.source === 'ACKNOWLEDGE_MESSAGE_RECEIPT' && _this2.h.onAckReceipt)) {
                  _context.next = 10;
                  break;
                }

                _context.next = 8;
                return _this2.h.onAckReceipt(msg);

              case 8:
                _context.next = 22;
                break;

              case 10:
                if (!(msg.category === 'SYSTEM_CONVERSATION' && _this2.h.onConversation)) {
                  _context.next = 15;
                  break;
                }

                _context.next = 13;
                return _this2.h.onConversation(msg);

              case 13:
                _context.next = 22;
                break;

              case 15:
                if (!(msg.category === 'SYSTEM_ACCOUNT_SNAPSHOT' && _this2.h.onTransfer)) {
                  _context.next = 20;
                  break;
                }

                _context.next = 18;
                return _this2.h.onTransfer(msg);

              case 18:
                _context.next = 22;
                break;

              case 20:
                _context.next = 22;
                return _this2.h.onMessage(msg);

              case 22:
                if (!_this2.options.syncAck) {
                  _context.next = 25;
                  break;
                }

                _context.next = 25;
                return _this2.send_raw({
                  id: _this2.newUUID(),
                  action: 'ACKNOWLEDGE_MESSAGE_RECEIPT',
                  params: {
                    message_id: msg.message_id,
                    status: "READ"
                  }
                });

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    this.ws.onclose = function () {
      clearInterval(_this2.pingInterval);

      _this2._loopBlaze();
    };

    this.ws.onerror = function (e) {
      e.message === "Opening handshake has timed out" && (_this2.url = _this2.url === oneUrl ? zeromeshUrl : oneUrl);
    };

    this.ws.onopen = function () {
      _this2.isAlive = true;

      _this2.send_raw({
        id: _this2.newUUID(),
        action: "LIST_PENDING_MESSAGES"
      });
    };
  };

  _proto.heartbeat = function heartbeat() {
    var _this3 = this;

    this.ws.on('pong', function () {
      _this3.isAlive = true;
    });
    this.pingInterval = setInterval(function () {
      if (_this3.ws.readyState === WebSocket.CONNECTING) return;
      if (!_this3.isAlive) return _this3.ws.terminate();
      _this3.isAlive = false;

      _this3.ws.ping();
    }, 1000 * 30);
  };

  _proto.decode = function decode(data) {
    var _this4 = this;

    return new Promise(function (resolve) {
      var _this4$options;

      var t = ungzip(data, {
        to: 'string'
      });
      var msgObj = JSON.parse(t);

      if ((_this4$options = _this4.options) != null && _this4$options.parse && msgObj.data && msgObj.data.data) {
        msgObj.data.data = Buffer.from(msgObj.data.data, 'base64').toString();

        try {
          msgObj.data.data = JSON.parse(msgObj.data.data);
        } catch (e) {}
      }

      resolve(msgObj.data);
    });
  };

  _proto.send_raw = function send_raw(message) {
    var _this5 = this;

    return new Promise(function (resolve) {
      var buffer = Buffer.from(JSON.stringify(message), 'utf-8');
      var zipped = gzip(buffer);

      if (_this5.ws.readyState === WebSocket.OPEN) {
        _this5.ws.send(zipped);

        resolve(true);
      } else {
        resolve(false);
      }
    });
  };

  return BlazeClient;
}(Client);

var readNetworkChains = function readNetworkChains() {
  return mixinRequest.get("/network/chains");
}; // only support limit/offset/asset/order

var readNetworkSnapshots = function readNetworkSnapshots(params) {
  return mixinRequest.get("/network/snapshots", {
    params: params
  });
};
var readNetworkSnapshot = function readNetworkSnapshot(id) {
  return mixinRequest.get("/network/snapshots/" + id);
};
var readExternalTransactions = function readExternalTransactions(params) {
  return mixinRequest.get("/external/transactions", {
    params: params
  });
};
var readNetworkAssetsTop = function readNetworkAssetsTop() {
  return mixinRequest.get("/network/assets/top");
};
var readNetworkAssetsMultisig = function readNetworkAssetsMultisig() {
  return mixinRequest.get("/network/assets/multisig");
};
var readNetworkAsset = function readNetworkAsset(id) {
  return mixinRequest.get("/network/assets/" + id);
};
var searchNetworkAsset = function searchNetworkAsset(assetNameOrSymbol) {
  return mixinRequest.get("/network/assets/search/" + assetNameOrSymbol);
};
var readExternalAddressesCheck = function readExternalAddressesCheck(params) {
  return mixinRequest.get("/external/addresses/check", {
    params: params
  });
};
var readNetworkTicker = function readNetworkTicker(asset_id, offset) {
  return mixinRequest.get("/network/ticker", {
    params: {
      asset: asset_id,
      offset: offset
    }
  });
};
var sendExternalProxy = function sendExternalProxy(method, params) {
  return mixinRequest.post("/external/proxy", {
    method: method,
    params: params
  });
};

export { BlazeClient, Client, mixinRequest, readAsset, readAssets, readBlockUsers, readConversation, readExternalAddressesCheck, readExternalTransactions, readFriends, readNetworkAsset, readNetworkAssetsMultisig, readNetworkAssetsTop, readNetworkChains, readNetworkSnapshot, readNetworkSnapshots, readNetworkTicker, readSnapshot, readSnapshots, request, searchNetworkAsset, sendExternalProxy, userMe };
//# sourceMappingURL=mixin-node-sdk.esm.js.map
