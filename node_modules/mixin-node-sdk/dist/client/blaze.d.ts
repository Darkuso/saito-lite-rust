import { Client } from "../client";
import { Keystore } from "../types";
import WebSocket from 'ws';
import { BlazeMessage, MessageView } from "../types/blaze";
interface BlazeOptions {
    parse?: boolean;
    syncAck?: boolean;
}
interface BlazeHandler {
    onMessage: (message: MessageView) => void;
    onAckReceipt?: (message: MessageView) => void;
    onTransfer?: (transfer: MessageView) => void;
    onConversation?: (conversation: MessageView) => void;
}
export declare class BlazeClient extends Client {
    ws: WebSocket | null;
    h: BlazeHandler;
    url: string;
    isAlive: boolean;
    pingInterval: any;
    options: BlazeOptions;
    constructor(keystore?: Keystore, option?: BlazeOptions);
    loopBlaze(h: BlazeHandler): void;
    _loopBlaze(): void;
    heartbeat(): void;
    decode(data: Uint8Array): Promise<MessageView>;
    send_raw(message: BlazeMessage): Promise<unknown>;
}
export {};
